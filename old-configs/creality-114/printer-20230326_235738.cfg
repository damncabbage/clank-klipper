# This file contains common pin mappings for the 2018 Creality
# Ender 3. To use this config, the firmware should be compiled for the
# AVR atmega1284p.

# Note, a number of Melzi boards are shipped with a bootloader that
# requires the following command to flash the board:
#  avrdude -p atmega1284p -c arduino -b 57600 -P /dev/ttyUSB0 -U out/klipper.elf.hex
# If the above command does not work and "make flash" does not work
# then one may need to flash a bootloader to the board - see the
# Klipper docs/Bootloaders.md file for more information.

# See docs/Config_Reference.md for a description of parameters.

# See https://github.com/RudolphRiedel/CR-10_wiring/blob/master/CR-10_Wiring.pdf for
# pins reference.

[stepper_x]
step_pin: PD7
dir_pin: !PC5
enable_pin: !PD6
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC2
position_endstop: 0
position_max: 235
homing_speed: 50

[stepper_y]
step_pin: PC6
dir_pin: !PC7
enable_pin: !PD6
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC3
position_endstop: 0
position_max: 235
homing_speed: 50

[stepper_z]
step_pin: PB3
dir_pin: PB2
enable_pin: !PA5
microsteps: 16
rotation_distance: 8
endstop_pin: ^PC4
position_min: -0.8
#position_endstop = 0.140
position_endstop = 0.100
#position_endstop: 0.0
#position_endstop = 0.0
position_max: 250

[extruder]
max_extrude_only_distance: 100.0
step_pin: PB1
dir_pin: !PB0
enable_pin: !PD6
microsteps: 16
rotation_distance: 33.683
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PD5
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA7
control: pid
# tuned for stock hardware with 200 degree Celsius target
pid_Kp: 21.527
pid_Ki: 1.063
pid_Kd: 108.982
min_temp: 0
max_temp: 250

[heater_bed]
heater_pin: PD4
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA6
control: pid
# tuned for stock hardware with 50 degree Celsius target
pid_Kp: 54.027
pid_Ki: 0.770
pid_Kd: 948.182
min_temp: 0
max_temp: 130

[fan]
pin: PB4

# TODO:
#[temperature_fan]
#pin: PA4   # ... steal the beeper? or PA2 if EXT-A2 exists
# Hot-end fan
#sensor_type: EPCOS 100K B57560G104F
#sensor_pin: PA7

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100

# Printer features, all off by default. :\
[firmware_retraction]
[gcode_arcs]
[pause_resume]
[respond]

# <long sigh>
[skew_correction]

# XY:
# Length AC = 141.02
# Length BD = 141.7
# Length AD = 100.0
# ie.
#   SET SKEW=141.02,141.7,100.0

[bed_screws]
screw1: 30.5, 37
screw2: 30.5, 207
screw3: 204.5, 207
screw4: 204.5, 37

[display]
lcd_type: st7920
cs_pin: PA3
sclk_pin: PA1
sid_pin: PC1
encoder_pins: ^PD2, ^PD3
click_pin: ^!PC0

# Remaining time
#[display_data _default_16x4 printing_time]
#position: 2, 10
#text:
#    {% set ptime = printer["gcode_macro M73"].r %}
#    { "R%02d:%02d" % (ptime // 60, ptime % 60) }
#
#[gcode_macro M73]
#rename_existing: M773
#variable_p: 0.0
#variable_r: 0.0
#default_parameter_P: 0.0
#default_parameter_R: 0.0
#gcode:
#    M773 P{P}
#    SET_GCODE_VARIABLE MACRO=M73 VARIABLE=p VALUE={P}
#    SET_GCODE_VARIABLE MACRO=M73 VARIABLE=r VALUE={R}

# The print bed can move so far to the front, that the nozzle can reach the
# plastic cover of the print bed heater cable (only when the bed is moved by
# hand). By homing the Y axis before the X axis, it is ensured the nozzle will
# not melt through the plastic part.
# BEWARE: You will lose the ability to home axes individually. The printer will
# always home all axes for every G28 command.
#[homing_override]
#gcode:
# G28 Y0
# G28 X0
# G28 Z0

[output_pin BEEPER]
pin: PA4
pwm: True ; A piezo beeper needs a PWM signal, a DC buzzer doesn't.
value: 0 ; Silent at power on, set to 1 if active low.
shutdown_value: 0 ; Disable at emergency shutdown
cycle_time: 0.001 ; PWM frequency : 0.001 = 1ms will give a base tone of 1kHz
scale: 4000 ; PWM parameter will be in the range of (0-4000 Hz).
#enable beeper on printer

[virtual_sdcard]
path: /home/octoprint/.octoprint/uploads/

; Compatibility to avoid "Invalid M204" errors because nothing produces M204 with _both_ P and T set.
[gcode_macro M204]
rename_existing: M204.1
gcode:
  {% set f = params.F|default(0.5)|float %}

  {% if 'S' in params %}
    {% set s = params.S|float %}
    SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
  {% else %}
    {% if 'P' in params %}
      {% set p = params.P|float %}
      {% if 'T' in params %}
        {% set t = params.T|float %}
        {% if p < t %}
          SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
        {% else %}
          SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
        {% endif %}
      {% else %}
        SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
      {% endif %}
    {% elif 'T' in params %}
      {% set t = params.T|float %}
      SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
    {% endif %}
  {% endif %}

;[gcode_macro M300]
;default_parameter_S: 1000
;default_parameter_P: 100
;gcode:
;    SET_PIN PIN=BEEPER_pin VALUE={S}
;    G4 P{P}
;    SET_PIN PIN=BEEPER_pin VALUE={S}
;#Custom M300 code to allow beeper to be used in gcode
;
;[gcode_macro end_tune]
;gcode:
;    M300 S3135 P75
;    M300 S3135 P150
;    M300 S1760 P150
;    M300 S1760 P150
;    M300 S2637 P150
;    M300 S2637 P150
;    M300 S3135 P150
;    SET_PIN PIN=BEEPER_pin VALUE=0

[menu __main __prepare]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Prepare

[menu __main __prepare __meshBed]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Mesh Bed Level

[menu __main __prepare __meshBed zposition]
type: input
name: Z Pos: {'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: 200
input_step: 10.0

[menu __main __prepare __meshBed start]
type: command
name: Start Callibration
gcode:
	G28
	BED_MESH_CALIBRATE
	TESTZ Z=-5

[menu __main __prepare __meshBed zNudgeDown]
type: command
name: Nudge Down
gcode: TESTZ Z=-0.025

[menu __main __prepare __meshBed zNudgeUp]
type: command
name: Nudge Up
gcode: TESTZ Z=0.025

[menu __main __prepare __meshBed next]
type: command
name: Next
gcode:
	ACCEPT
	TESTZ Z=-5

[menu __main __prepare __meshBed save]
type: command
name: Save & Restart
gcode: SAVE_CONFIG

[menu __main __prepare bedMesh]
type: command
name: Generate Bed Mesh
gcode: 
    G28
    BED_MESH_CALIBRATE

[menu __main __prepare __bedScrews]
type: list
name: Bed Screws

[menu __main __prepare __bedScrews homeAll]
type: command
name: Home X/Y/Z
gcode:
    G28

[menu __main __prepare __bedScrews homeZ]
type: command
name: Home Z
gcode:
    G28 Z

[menu __main __prepare __bedScrews start]
type: command
name: Start
gcode:
    BED_SCREWS_ADJUST

[menu __main __prepare __bedScrews accept]
type: command
name: Accept
gcode: 
    ACCEPT

[menu __main __prepare __bedScrews adjust]
type: command
name: Adjust
gcode: 
    ADJUSTED

[menu __main __prepare __bedScrews abort]
type: command
name: Abort
gcode: 
    ABORT
    G1 Z10

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*#[stepper_z]
#*#position_endstop = 0.0

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [stepper_z]
#*# position_endstop = 0.550
